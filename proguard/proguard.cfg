# ********** 混淆系统参数通用配置 start **********

# 忽略所有警告，否则有警告的时候混淆会停止
-ignorewarnings
# 不做收缩（删除注释、未被引用代码）
-dontshrink
# 不做优化（变更代码实现逻辑）
-dontoptimize
#使用给定文件中的关键字作为混淆名称
-obfuscationdictionary keywords.txt
#指定class模糊字典
-classobfuscationdictionary keywords.txt
# 声明在处理过程中输出更多信息,添加这项配置之后,如果处理过程中出现异常,会输出整个StackTrace而不是一条简单的异常说明.
-verbose

# $$$$$$$$$$ 混淆系统参数通用配置 end $$$$$$$$$$


# ********** 混淆java参数通用配置 start **********

# JDK目标版本1.8
-target 1.8

# 指定字符串常量如果与类名相同,也需要被混淆
-adaptclassstrings
# 不路过非公用类文件及成员
-dontskipnonpubliclibraryclasses
-dontskipnonpubliclibraryclassmembers
# 优化时允许访问并修改有修饰符的类和类的成员
-allowaccessmodification
# 确定统一的混淆类的成员名称来增加混淆
-useuniqueclassmembernames
# 混淆时不会产生大小写混合的类名。默认混淆后的类名可以包含大写及小写
-dontusemixedcaseclassnames

# 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名
-keeppackagenames
# 不混淆局部变量名
-keepparameternames
# 不混淆所有特殊的类
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod

# 保持类protected成员不被混淆
-keepclassmembers public class *  { protected <fields>; protected <methods>; }

# 不混淆枚举中的这些方法
-keepclassmembers enum * {
    private <fields>;
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射
-keepclassmembers public class * {
    void set*(***);
    *** get*();
    @java.lang.Override <methods>;
}

-keep interface *
-keep interface * extends * { *; }

# $$$$$$$$$$ 混淆java参数通用配置 end $$$$$$$$$$


# ********** 混淆spring boot参数通用配置 start **********

# 不混淆启动类
-keep @org.springframework.boot.autoconfigure.SpringBootApplication class *
-keep @org.springframework.boot.autoconfigure.SpringBootApplication class * {*;}

# 不混淆spring bean
-keep @javax.persistence.Table class *
-keep @org.springframework.stereotype.Component class *
-keep @org.springframework.context.annotation.Configuration class *
-keep @org.apache.ibatis.annotations.Mapper class *
-keep @org.springframework.stereotype.Service class *
-keep @org.springframework.stereotype.Controller class *
-keep @org.springframework.web.bind.annotation.RestController class *
-keep @org.springframework.web.bind.annotation.RestControllerAdvice class *
-keep @org.aspectj.lang.annotation.Aspect class *

# 不混淆数据库实体类
-keep @javax.persistence.Table class * {*;}

# 不混淆spring注入变量
-keepclassmembers class * {
    @org.springframework.beans.factory.annotation.Autowired *;
    @org.springframework.beans.factory.annotation.Value *;
}

# 不混淆方法
-keepclassmembers class * {
    @org.springframework.context.annotation.Bean <methods>;
    @org.springframework.web.bind.annotation.RequestMapping <methods>;
    @org.springframework.web.bind.annotation.GetMapping <methods>;
    @org.springframework.web.bind.annotation.PostMapping <methods>;
    @org.springframework.web.bind.annotation.PutMapping <methods>;
    @org.aspectj.lang.annotation.Around <methods>;
    @org.aspectj.lang.annotation.Before <methods>;
    @org.aspectj.lang.annotation.Pointcut <methods>;
}

#保留Serializable序列化的类不被混淆
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readReslove();
}


# $$$$$$$$$$ 混淆spring boot参数通用配置 end $$$$$$$$$$


# ********** 混淆esidon配置 start **********

#保护程序入口
-keep class com.lax.proguard.ProguardApplication {*;}

# 保留路径下的全部类
-keep class com.lax.proguard.controller.** {*;}

# $$$$$$$$$$ 混淆esidon配置 end $$$$$$$$$$